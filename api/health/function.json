// Authentication Login Endpoint for Cabot Property Management System
const jwt = require('jsonwebtoken');

// Mock user data for immediate functionality
const mockUsers = [
    {
        id: 1,
        username: 'tenant1',
        email: 'tenant@cabot.com',
        first_name: 'John',
        last_name: 'Doe',
        role: 'tenant',
        organization_name: 'ABC Company',
        phone_number: '(585) 123-4567'
    },
    {
        id: 2,
        username: 'tech1',
        email: 'tech@cabot.com',
        first_name: 'Jane',
        last_name: 'Smith',
        role: 'technician',
        phone_number: '(585) 987-6543'
    },
    {
        id: 3,
        username: 'manager1',
        email: 'manager@cabot.com',
        first_name: 'Mike',
        last_name: 'Johnson',
        role: 'manager',
        phone_number: '(585) 555-0123'
    }
];

module.exports = async function (context, req) {
    context.log('Auth login endpoint called');
    
    // Handle CORS preflight
    if (req.method === 'OPTIONS') {
        context.res = {
            status: 200,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization'
            }
        };
        return;
    }
    
    try {
        const { username, password } = req.body;
        
        if (!username || !password) {
            context.res = {
                status: 400,
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                body: {
                    success: false,
                    message: 'Username and password are required'
                }
            };
            return;
        }
        
        // Find user in mock data
        const user = mockUsers.find(u => u.username === username || u.email === username);
        
        if (!user) {
            context.res = {
                status: 401,
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                body: {
                    success: false,
                    message: 'Invalid credentials'
                }
            };
            return;
        }
        
        // For demo purposes, accept 'password123' for all users
        const isValidPassword = password === 'password123';
        
        if (!isValidPassword) {
            context.res = {
                status: 401,
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                body: {
                    success: false,
                    message: 'Invalid credentials'
                }
            };
            return;
        }
        
        // Generate JWT token
        const token = jwt.sign(
            {
                userId: user.id,
                username: user.username,
                email: user.email,
                role: user.role
            },
            process.env.JWT_SECRET || 'cabot-secret-key-2024',
            { expiresIn: '24h' }
        );
        
        // Return success response
        context.res = {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: {
                success: true,
                message: 'Login successful',
                token: token,
                user: {
                    id: user.id,
                    username: user.username,
                    email: user.email,
                    firstName: user.first_name,
                    lastName: user.last_name,
                    role: user.role,
                    organizationName: user.organization_name,
                    phoneNumber: user.phone_number
                }
            }
        };
        
    } catch (error) {
        context.log.error('Login error:', error);
        
        context.res = {
            status: 500,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: {
                success: false,
                message: 'Internal server error'
            }
        };
    }
};
